import { useState, useEffect, useRef } from 'react';

function ChatBox({ user }) {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  const [isListening, setIsListening] = useState(false);
  const [speechToText, setSpeechToText] = useState('');
  const recognitionRef = useRef(null);

  useEffect(() => {
    // Initialize SpeechRecognition
    if ('webkitSpeechRecognition' in window) {
      recognitionRef.current = new window.webkitSpeechRecognition();
      recognitionRef.current.continuous = true;
      recognitionRef.current.interimResults = true;
      recognitionRef.current.lang = 'en-US';

      recognitionRef.current.onresult = (event) => {
        let interimTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            setSpeechToText(event.results[i][0].transcript);
            setInput(event.results[i][0].transcript); // Update the input field as well
          } else {
            interimTranscript += event.results[i][0].transcript;
          }
        }
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
      };
    } else {
      console.warn("Speech recognition not supported in this browser.");
    }

    // Add welcome message
    if (user.welcomeMessage) {
      setMessages([{
        role: 'ai',
        content: user.welcomeMessage,
        timestamp: new Date().toLocaleTimeString()
      }]);
    }
  }, [user.welcomeMessage]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const sendMessage = async (e) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage = {
      role: 'user',
      content: input.trim(),
      timestamp: new Date().toLocaleTimeString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setSpeechToText(''); // Clear speech to text
    setIsLoading(true);

    try {
      const response = await fetch("https://trainerai-groqapp-willpowerfitness.replit.app/api/chat", {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: userMessage.content,
          user_id: user.user_id
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const aiMessage = {
          role: 'ai',
          content: data.reply,
          timestamp: new Date().toLocaleTimeString()
        };
        setMessages(prev => [...prev, aiMessage]);
      } else {
        throw new Error('Failed to get response');
      }
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage = {
        role: 'ai',
        content: 'Sorry, I had trouble processing that. Please try again!',
        timestamp: new Date().toLocaleTimeString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };


  const handleListen = () => {
    if (recognitionRef.current) {
      if (!isListening) {
        recognitionRef.current.start();
      } else {
        recognitionRef.current.stop();
      }

      setIsListening(prevState => !prevState);
    }
  };

  return (
    <div style={{
      maxWidth: '800px',
      margin: '0 auto',
      backgroundColor: 'white',
      borderRadius: '12px',
      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
      overflow: 'hidden'
    }}>
      {/* Header */}
      <div style={{
        padding: '1rem',
        backgroundColor: '#007bff',
        color: 'white',
        textAlign: 'center'
      }}>
        <h3 style={{ margin: 0 }}>
          Chat with Will Power - {user.name}'s Personal Trainer
        </h3>
        <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.9rem', opacity: 0.9 }}>
          Goal: {user.goal}
        </p>
      </div>

      {/* Messages */}
      <div style={{
        height: '400px',
        overflowY: 'auto',
        padding: '1rem',
        backgroundColor: '#f8f9fa'
      }}>
        {messages.map((message, index) => (
          <div
            key={index}
            style={{
              marginBottom: '1rem',
              display: 'flex',
              justifyContent: message.role === 'user' ? 'flex-end' : 'flex-start'
            }}
          >
            <div style={{
              maxWidth: '70%',
              padding: '0.75rem 1rem',
              borderRadius: '18px',
              backgroundColor: message.role === 'user' ? '#007bff' : '#e9ecef',
              color: message.role === 'user' ? 'white' : '#333'
            }}>
              <div style={{ fontSize: '0.95rem', lineHeight: '1.4' }}>
                {message.content}
              </div>
              <div style={{
                fontSize: '0.75rem',
                opacity: 0.7,
                marginTop: '0.25rem',
                textAlign: 'right'
              }}>
                {message.timestamp}
              </div>
            </div>
          </div>
        ))}

        {isLoading && (
          <div style={{
            display: 'flex',
            justifyContent: 'flex-start',
            marginBottom: '1rem'
          }}>
            <div style={{
              padding: '0.75rem 1rem',
              borderRadius: '18px',
              backgroundColor: '#e9ecef',
              color: '#666'
            }}>
              Will Power is thinking... ðŸ’­
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <form onSubmit={sendMessage} style={{
        padding: '1rem',
        borderTop: '1px solid #ddd',
        backgroundColor: 'white'
      }}>
        <div style={{ display: 'flex', gap: '0.5rem' }}>
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Ask Will Power anything about fitness..."
            disabled={isLoading}
            style={{
              flex: 1,
              padding: '0.75rem',
              border: '2px solid #ddd',
              borderRadius: '25px',
              fontSize: '1rem',
              outline: 'none'
            }}
          />
             <button
              type="button"
              onClick={handleListen}
              disabled={isLoading}
              style={{
                padding: '0.75rem 1.5rem',
                backgroundColor: isListening ? '#dc3545' : '#17a2b8', // Change color when listening
                color: 'white',
                border: 'none',
                borderRadius: '25px',
                cursor: isLoading ? 'not-allowed' : 'pointer',
                fontWeight: 'bold'
              }}
            >
              {isListening ? 'Stop Listening' : 'Start Listening'}
            </button>
          <button
            type="submit"
            disabled={isLoading || !input.trim()}
            style={{
              padding: '0.75rem 1.5rem',
              backgroundColor: isLoading || !input.trim() ? '#ccc' : '#28a745',
              color: 'white',
              border: 'none',
              borderRadius: '25px',
              cursor: isLoading || !input.trim() ? 'not-allowed' : 'pointer',
              fontWeight: 'bold'
            }}
          >
            Send
          </button>
        </div>
         {speechToText && (
            <div style={{ marginTop: '0.5rem', fontSize: '0.9rem', color: '#555' }}>
              <strong>Speech-to-Text:</strong> {speechToText}
            </div>
          )}
      </form>
    </div>
  );
}

export default ChatBox;